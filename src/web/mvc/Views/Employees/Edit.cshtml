@model webapp.mvc.Models.Employee

@{
    ViewBag.Title = "Edit";
}
<!-- Pulls in asynchronous requests for Managers, etc -->
<script src="~/js/employees.js"></script>
<script src="~/js/editform.js"></script>

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
    <h4>Employee</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.ID)

    <div class="form-group">
        @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            @Html.ValidationMessageFor(model => model.ID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <label for="EmployeeType" class="control-label col-md-2">Employee type</label>
        <div class="col-md-10">
            <select name="EmployeeType" id="EmployeeType" class="form-select">
                <option value="Employee">Employee</option>
                <option value="Manager">Manager</option>
                <option value="CEO">CEO</option>
            </select>
        </div>
        @Html.ValidationMessage("EmployeeType", "", new { @class = "text-danger" })
        @Html.ValidationMessageFor(model => model.IsCEO, "", new { @class = "text-danger " })
        @Html.ValidationMessageFor(model => model.IsManager, "", new { @class = "text-danger " })
    </div>

    <div class="form-group">
        <label for="ManagerID" class="control-label col-md-2">Managed by (optional)</label>
        <div class="col-md-10">
            <select id="ManagerID" name="ManagerID" class="form-select">
                <option value="-1">None</option>
            </select>
            @Html.ValidationMessageFor(model => model.ManagerID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-primary" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script>
    onDocumentLoaded(() => {

        function setEmployeeTypeSelection() {
            let e = document.getElementById("EmployeeType");
            let isCEO = @Json.Serialize(Model.IsCEO);
            let isManager = @Json.Serialize(Model.IsManager);
            // this is stupid. Stupid C#. Stupid. Stupid. Stupid.
            if (isCEO) {
                e.value = "CEO";
            } else if (isManager) {
                e.value = "Manager";
            } else {
                e.value = "Employee";
            }
        };
        setEmployeeTypeSelection();
        getManagers().then(result => {
            let managerSelect = document.getElementById("ManagerID");
            if (managerSelect) {
                for (let manager of result) {
                    let opt = new Option(manager.name, manager.id);
                    managerSelect.appendChild(opt);
                }
            }
        }).catch(err => {
            alert("<SERVER ERROR> Failed to get Managers.");
        }).then(res => {
            let managerId = @Json.Serialize(Model.ManagerID ?? -1);
            console.log(`Man id ${managerId}`);
            setSelection(managerId, "ManagerID");
        });
        formInputTrimmer();
    });
</script>