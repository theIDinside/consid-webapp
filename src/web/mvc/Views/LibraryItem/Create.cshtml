@model webapp.mvc.Models.ViewModels.CreateLibraryItemModel
@{

    ViewBag.Title = "Create Library item";
}

<script type="text/javascript">
    function doUpdate() {
        let lengthLabel = document.getElementById("lengthLabel");
        let typeSelect = document.getElementById("Type");
        switch (typeSelect.value) {
            case "book":
            case "reference book":
                lengthLabel.innerText = "Pages";
                break;
            case "audio book":
            case "dvd":
                lengthLabel.innerText = "Run time (minutes)";
                break;
            default:
                lengthLabel.innerText = "Length";
        }
    }

</script>

<h2>Create</h2>
@using (Html.BeginForm("Create", "LibraryItem", FormMethod.Post, new { @id = "CreateLibraryItemForm" }))

{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Item properties</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Author, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Author, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Author, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Type, new List<SelectListItem> {
            new SelectListItem { Value = "book", Text="Book" },
            new SelectListItem { Value = "reference book", Text = "Reference book" },
            new SelectListItem { Value = "dvd", Text = "DVD" },
            new SelectListItem { Value = "audio book", Text = "Audio Book" }
            }, new { @class = "form-select", @onchange = "doUpdate()" })
                @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label for="Length" id="lengthLabel">Pages</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.Length, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Length, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label for="Category" class="control-label col-md-2">Select category</label>
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.CategoryID, @Model!.Categories, new { @class = "form-select" })
                @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </div>
        <div class="text-danger">
            @ViewBag.ErrorMessage
        </div>
    </div>

}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script>
    onDocumentLoaded(formInputTrimmer);
</script>