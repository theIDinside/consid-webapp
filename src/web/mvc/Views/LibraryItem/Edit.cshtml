@using webapp.mvc.Models;
@model webapp.mvc.Models.ViewModels.EditLibraryItemModel;

@{
    ViewBag.Title = $"Edit {Model.Title}";
}
<script src="~/js/editform.js"></script>
<script src="~/js/validation.js"></script>
<div class="tabpane">
    <button class="tab-button" id="EditDetailsButton">Edit details</button>
    <button class="tab-button" id="CheckOutButton">Checkout</button>
</div>

<div id="EditDetailsTab" class="tabcontent">
    <h2>Edit details for:</h2>
    @using (Html.BeginForm("Edit", "LibraryItem", FormMethod.Post, new { @id = "EditForm" })) {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.ID);
        <div class="form-horizontal">
            <h4>@Model.Title.ListDisplay()</h4>

            <hr />
            <div class="form-group">
                <label for="CategoryID" class = "control-label col-md-2">Category</label>
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.CategoryID, Model.Categories, new { @class = "form-select" })
                    @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.Type,
                        new List<SelectListItem> {
                                        new SelectListItem { Value = "book", Text="Book" },
                                        new SelectListItem { Value = "reference book", Text = "Reference book" },
                                        new SelectListItem { Value = "dvd", Text = "DVD" },
                                        new SelectListItem { Value = "audio book", Text = "Audio Book" }
                            }, new { @class = "form-select", @onchange = "updateLengthLabel()" }
                        )
                    @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Author, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Author, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Author, "", new { @class = "text-danger" })
                </div>
            </div>
            <div>
                @Html.LabelFor(model => model.Length, htmlAttributes: new { @class = "control-label col-md-2", @id = "LengthLabel" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Length, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Length, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save changes" class="btn btn-primary" />
                </div>
            </div>
            <div class="text-danger">
                @ViewBag.EditErrorMessage
            </div>
        </div>
    }
</div>

<div id="CheckOutTab" class="tabcontent">
    <div class="form-horizontal">
        <h4>Checkout information</h4>
        <hr />
        @{
            if (Model.IsBorrowable ?? false) {
                if (Model.BorrowDate.HasValue) {
                    using (Html.BeginForm("CheckIn", "LibraryItem", FormMethod.Get, new { @id = "CheckInForm" })) {
                        @Html.HiddenFor(m => m.ID);
                        <div class="form-group-sm">
                            <div>
                                <div>
                                    @Html.LabelFor(model => model.Borrower)
                                </div>
                                <div>
                                    @Html.DisplayFor(model => model.Borrower)
                                </div>
                                <div>
                                    @Html.LabelFor(model => model.BorrowDate)
                                </div>
                                <div>
                                    @Html.DisplayFor(model => model.BorrowDate)
                                </div>
                                <div>
                                    @Html.ActionLink("Check in", "CheckIn", "LibraryItem", new { id = Model.ID }, new { @class = "btn btn-primary text-center" })
                                </div>
                            </div>
                        </div>
                    }
                } else {
                    using (Html.BeginForm("CheckOut", "LibraryItem", FormMethod.Post, new { @id = "CheckoutForm" })) {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(model => model.ID)
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            <label for="Borrower2" class="control-label col-md-2">Borrower</label>
                            <div class="col-md-10">
                                <input type="text" id="Borrower2" name="Borrower" required minlength="1" class="form-control ">
                                <span id="BorrowerValidate" class="text-danger field-validation-valid"></span>
                                @Html.ValidationMessageFor(model => model.Borrower, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="BorrowDate" class="control-label col-md-2">Check out date</label>
                            <div class="col-md-10">
                                <input type="text" id="BorrowDate2" name="BorrowDate" required minlength="8" class="form-control" placeholder="e.g. 99/12/31 | 1999/12/31 | 1999-12-31">
                                <span id="BorrowDateValidate" class="text-danger field-validation-valid"></span>
                                @Html.ValidationMessageFor(model => model.BorrowDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="Save changes" class="btn btn-primary" />
                            </div>
                        </div>
                    }
                }
            } else {
                <div>
                    You can't check out reference books.
                </div>
            }
        }
    </div>

</div>

<div class="">
    @Html.ActionLink("Back to List", "Index")
</div>

<script type="text/javascript">
    let borrowerInput = document.getElementById("Borrower2");
    let borrowerValidate = document.getElementById("BorrowerValidate");

    let borrowDateInput = document.getElementById("BorrowDate2");
    let borrowDateValidate = document.getElementById("BorrowDateValidate");

    let form = document.getElementById("CheckoutForm");
    if (form) {
        form.addEventListener("submit", (evt) => {
            // who needs validation libraries? :)
            if (!validateInputOnSubmit(borrowerInput, "The name of the borrower must be input", evt, (e) => e.value.length > 0 && e.value != null)) {
                // start listening on every input until a valid one is entered
                borrowerInput.addEventListener("input", () => {
                    validateInputOnSubmit(borrowerInput, "The name of the borrower must be input", null, (e) => e.value.length > 0 && e.value != null);
                });
            }
            if (!validateInputOnSubmit(borrowDateInput, "Input must be a valid date", evt, dateValidator)) {
                // start listening on every input until a valid one is entered
                borrowDateInput.addEventListener("input", () => {
                    validateInputOnSubmit(borrowDateInput, "Input must be a valid date", null, dateValidator);
                });
            }
        });
    }


    function updateLengthLabel(init) {
        const type = init ?? document.getElementById("Type").value;
        console.log(`Set type: ${type}`);
        switch(type) {
            case "book":
            case "reference book":
            document.getElementById("LengthLabel").innerText = "Pages";
            break;
            case "audio book":
            case "dvd":
            document.getElementById("LengthLabel").innerText = "Run time (minutes)";
            break;
        }
    }

    onDocumentLoaded(async () => {
        for (let e of document.getElementsByClassName("tab-button")) {
           e.addEventListener("click", (evt) => {
                let id = evt.target.id.replace("Button", "Tab");
                openTab(evt.target, id);
            })
        }
        formInputTrimmer();
        // set input field state on page load
        // update form fields to contain values of this library item.
        const type = @Json.Serialize(Model.Type);
        updateLengthLabel(type);
        // set Edit Details tab as active
        let tab = @Json.Serialize(Model.ViewTab) ?? "EditDetailsTab";
        let btn = tab.replace("Tab", "Button");
        console.log(`button: ${btn} / tab ${tab}`);
        openTab(document.getElementById(btn), tab);
        // select the category, which this item belongs to as default selected
        setSelection(@Json.Serialize(Model.CategoryID), "CategoryID");
    });
</script>